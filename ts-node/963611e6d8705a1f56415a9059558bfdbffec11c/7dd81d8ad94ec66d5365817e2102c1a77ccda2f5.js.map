{"version":3,"file":"/home/pierfreeman/workspace/iterpro/training/Angular2-express-mongoose-gulp-node-typescript/gulpfile.ts","sources":["/home/pierfreeman/workspace/iterpro/training/Angular2-express-mongoose-gulp-node-typescript/gulpfile.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Created by Moiz.Kachwala on 08-06-2016.\n */\n\n\n\"use strict\";\n\nconst gulp = require(\"gulp\"),\n    del = require(\"del\"),\n    tsc = require(\"gulp-typescript\"),\n    sourcemaps = require('gulp-sourcemaps'),\n    tsProject = tsc.createProject(\"tsconfig.json\"),\n    tslint = require('gulp-tslint'),\n    concat = require('gulp-concat'),\n    runSequence = require('run-sequence'),\n    nodemon = require('gulp-nodemon'),\n    gulpTypings = require(\"gulp-typings\");\n\n/**\n * Remove build directory.\n */\ngulp.task('clean', (cb) => {\n    return del([\"dist\"], cb);\n});\n\n/**\n * Build Express server\n */\ngulp.task('build:server', function () {\n    var tsProject = tsc.createProject('server/tsconfig.json');\n    var tsResult = gulp.src('server/src/**/*.ts')\n        .pipe(sourcemaps.init())\n        .pipe(tsProject());\n    return tsResult.js\n        .pipe(sourcemaps.write())\n        .pipe(gulp.dest('dist/server'));\n});\n\ngulp.task('build:client', function () {\n    var tsProject = tsc.createProject('client/tsconfig.json');\n    var tsResult = gulp.src('client/**/*.ts')\n        .pipe(sourcemaps.init())\n        .pipe(tsProject());\n    return tsResult.js\n        .pipe(sourcemaps.write())\n        .pipe(gulp.dest('dist/client'));\n});\n\n/**\n * Lint all custom TypeScript files.\n */\ngulp.task('tslint', () => {\n    return gulp.src(\"client/app/**/*.ts\")\n        .pipe(tslint({\n\t\t\tformatter: \"prose\"\n\t\t}))\n\t\t.pipe(tslint.report());\n});\n\n\n/**\n * Compile TypeScript sources and create sourcemaps in build directory.\n */\ngulp.task(\"compile\", [\"tslint\"], () => {\n    let tsResult = gulp.src(\"client/**/*.ts\")\n        .pipe(sourcemaps.init())\n        .pipe(tsProject());\n    return tsResult.js\n        .pipe(sourcemaps.write(\".\"))\n        .pipe(gulp.dest(\"dist/client\"));\n});\n\n/**\n * Copy all resources that are not TypeScript files into build directory. e.g. index.html, css, images\n */\ngulp.task(\"clientResources\", () => {\n    return gulp.src([\"client/**/*\", \"!**/*.ts\", \"!client/typings\", \"!client/typings/**\", \"!client/*.json\"])\n        .pipe(gulp.dest(\"dist/client\"));\n});\n\n/**\n * Copy bin directory for www\n */\ngulp.task(\"serverResources\", () => {\n    return gulp.src([\"server/src/bin/**\"])\n        .pipe(gulp.dest(\"dist/server/bin\"));\n});\n\n/**\n * Copy all required libraries into build directory.\n */\ngulp.task(\"libs\", () => {\n    return gulp.src([\n        'core-js/client/**',\n        'zone.js/dist/zone.js',\n        'reflect-metadata/Reflect.js',\n        'reflect-metadata/Reflect.js.map',\n        'systemjs/dist/system.src.js'\n    ], { cwd: \"node_modules/**\" }) /* Glob required here. */\n        .pipe(gulp.dest(\"dist/client/libs\"));\n});\n\n/**\n * Copy all required libraries into build directory.\n */\ngulp.task(\"css\", () => {\n    return gulp.src([\n        'bootstrap/dist/**/**'\n    ], { cwd: \"node_modules/**\" }) /* Glob required here. */\n        .pipe(gulp.dest(\"dist/client/css\"));\n});\n\n\n/**\n * Install typings for server and client.\n */\ngulp.task(\"installTypings\", function () {\n    var stream = gulp.src([\"./server/typings.json\", \"./client/typings.json\"])\n        .pipe(gulpTypings(null)); //will install all typingsfiles in pipeline.\n    return stream; // by returning stream gulp can listen to events from the stream and knows when it is finished.\n});\n\n/**\n * Start the express server with nodemon\n */\ngulp.task('start', function () {\n    nodemon({\n        script: 'dist/server/bin/www'\n        , ext: 'html js'\n        , ignore: ['ignored.js']\n        , tasks: ['tslint']\n    })\n        .on('restart', function () {\n            console.log('restarted!');\n        });\n});\n\n/**\n * Build the project.\n * 1. Clean the build directory\n * 2. Build Express server\n * 3. Build the Angular app\n * 4. Copy the resources\n * 5. Copy the dependencies.\n */\n\ngulp.task(\"build\", function (callback) {\n    runSequence('clean', 'build:server', 'build:client', 'clientResources', 'serverResources', 'libs', 'css', callback);\n});\n\n/**\n * Watch for changes in TypeScript, HTML and CSS files.\n */\ngulp.task('watch', function () {\n    gulp.watch([\"client/**/*.ts\"], ['compile']).on('change', function (e) {\n        console.log('TypeScript file ' + e.path + ' has been changed. Compiling.');\n    });\n\n    gulp.watch([\"client/**/*.html\", \"client/**/*.css\"], ['clientResources']).on('change', function (e) {\n        console.log('Resource file ' + e.path + ' has been changed. Updating.');\n    });\n\n    gulp.watch([\"server/src/**/*.ts\"], ['compile']).on('change', function (e) {\n        console.log('TypeScript file ' + e.path + ' has been changed. Compiling.');\n    });\n});\n\n/**\n * Build the project.\n * 1. Clean the build directory\n * 2. Build Express server\n * 3. Build the Angular app\n * 4. Copy the resources\n * 5. Copy the dependencies.\n */\n\ngulp.task(\"build\", function (callback) {\n    runSequence('clean', 'build:server', 'build:client', 'clientResources', 'serverResources', 'libs', 'css', callback);\n});\n\ngulp.task('default', function () {\n    runSequence('build:server', 'build:client', 'clientResources', 'serverResources', 'libs', 'css', 'watch', 'start');\n});\n"]}